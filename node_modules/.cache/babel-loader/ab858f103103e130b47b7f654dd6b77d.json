{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dragon Slayer\\\\Desktop\\\\FoodShop\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nfunction cartReducer(state, action) {\n  if (action.type === 'ADD_CART_ITEM') {\n    const exsistingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const exsistingCartItem = state.items[exsistingCartItemIndex];\n    let updatedItems;\n\n    if (exsistingCartItem) {\n      const updatedItem = { ...exsistingCartItem,\n        amount: exsistingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[exsistingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE_CART_ITEM') {\n    const exsistingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[exsistingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[exsistingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } // CLEAR CART ONCE ORDER IS FUFILLED\n\n\n  if (action.type === 'CLEAR') {\n    return defaultCartState;\n  }\n\n  return defaultCartState;\n}\n\nfunction CartProvider(props) {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  function addItemToCartHandler(item) {\n    dispatchCartAction({\n      type: 'ADD_CART_ITEM',\n      item: item\n    });\n  }\n\n  function removeItemFromCartHandler(id) {\n    dispatchCartAction({\n      type: 'REMOVE_CART_ITEM',\n      id: id\n    });\n  }\n\n  function clearCartHandler() {\n    dispatchCartAction({\n      type: 'CLEAR'\n    });\n  }\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/Dragon Slayer/Desktop/FoodShop/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","exsistingCartItemIndex","findIndex","item","id","exsistingCartItem","updatedItems","updatedItem","amount","concat","updatedTotalAmount","price","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react'\r\nimport CartContext from './cart-context';\r\n\r\nconst defaultCartState = {\r\n    items: [],\r\n    totalAmount: 0,\r\n};\r\n\r\nfunction cartReducer(state, action){\r\n    \r\n    if(action.type === 'ADD_CART_ITEM'){\r\n        const exsistingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\r\n        const exsistingCartItem = state.items[exsistingCartItemIndex];\r\n        \r\n        let updatedItems;\r\n\r\n        if(exsistingCartItem){\r\n            const updatedItem = {\r\n                ...exsistingCartItem,\r\n                amount: exsistingCartItem.amount + action.item.amount\r\n            }\r\n            updatedItems = [...state.items];\r\n            updatedItems[exsistingCartItemIndex] = updatedItem;\r\n        }\r\n        else{\r\n            updatedItems = state.items.concat(action.item);\r\n        }\r\n    \r\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n        return {\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount,\r\n        };\r\n    }\r\n    if(action.type === 'REMOVE_CART_ITEM'){        \r\n        const exsistingCartItemIndex = state.items.findIndex(item => item.id === action.id);\r\n    \r\n    const existingItem = state.items[exsistingCartItemIndex];\r\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n    let updatedItems;\r\n    \r\n        if(existingItem.amount === 1){\r\n            updatedItems = state.items.filter(item => item.id !== action.id);\r\n        }\r\n        else{\r\n            const updatedItem = {...existingItem, amount: existingItem.amount -1};\r\n            updatedItems = [...state.items];\r\n            updatedItems[exsistingCartItemIndex] = updatedItem;\r\n\r\n        }\r\n        return{\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        }\r\n\r\n    }\r\n\r\n    // CLEAR CART ONCE ORDER IS FUFILLED\r\n    if(action.type === 'CLEAR'){\r\n        return defaultCartState;    \r\n    }\r\n\r\n    return defaultCartState;\r\n}\r\n\r\nfunction CartProvider(props){\r\n\r\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\nfunction addItemToCartHandler(item){\r\n    dispatchCartAction({\r\n        type: 'ADD_CART_ITEM',\r\n        item: item\r\n    });\r\n}\r\n\r\nfunction removeItemFromCartHandler(id){\r\n    dispatchCartAction({\r\n        type: 'REMOVE_CART_ITEM',\r\n        id: id\r\n    });\r\n}\r\n\r\nfunction clearCartHandler() {\r\n    dispatchCartAction({type: 'CLEAR'});\r\n}\r\n\r\n\r\nconst cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler \r\n}\r\n    return(\r\n        <CartContext.Provider value={cartContext}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    );\r\n}\r\n\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}